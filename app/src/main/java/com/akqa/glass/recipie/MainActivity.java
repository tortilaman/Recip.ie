package com.akqa.glass.recipie;

/*
 *  Hello World Imports
 */
//Glass Specific
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

//General Android
import android.app.Activity;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

/*
 *  Photo Imports
 */
import android.content.Intent;
import android.os.FileObserver;
import android.provider.MediaStore;
import com.google.android.glass.content.Intents;
import java.io.File;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     * This is what contains the views, but the actual views are adapters
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    private static final int TAKE_PICTURE_REQUEST = 1;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        setView(mView); //Setting the view...

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);
        return card.getView();
    }

    /*
     *     ,ad8888ba,
     *    d8"'    `"8b
     *   d8'
     *   88             ,adPPYYba,  88,dPYba,,adPYba,    ,adPPYba,  8b,dPPYba,  ,adPPYYba,
     *   88             ""     `Y8  88P'   "88"    "8a  a8P_____88  88P'   "Y8  ""     `Y8
     *   Y8,            ,adPPPPP88  88      88      88  8PP"""""""  88          ,adPPPPP88
     *    Y8a.    .a8P  88,    ,88  88      88      88  "8b,   ,aa  88          88,    ,88
     *     `"Y8888Y"'   `"8bbdP"Y8  88      88      88   `"Ybbd8"'  88          `"8bbdP"Y8
     *
     *  from: https://developers.google.com/glass/develop/gdk/camera#capturing_images_or_video
     */
    private void takePicture() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);    //Create Camera Intent
        startActivityForResult(intent, TAKE_PICTURE_REQUEST);           //Start Intent
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == TAKE_PICTURE_REQUEST && resultCode == RESULT_OK) {
            String thumbnailPath = data.getStringExtra(Intents.EXTRA_THUMBNAIL_FILE_PATH);
            String picturePath = data.getStringExtra(Intents.EXTRA_PICTURE_FILE_PATH);

            processPictureWhenReady(picturePath);
            // TODO: Test that the thumbnail is displayed while full pic is processing
            Drawable thumbImage = Drawable.createFromPath(thumbnailPath);
            CardBuilder thumbnail = new CardBuilder(this, CardBuilder.Layout.CAPTION);
            thumbnail.setText("Processing");
            thumbnail.setFootnote("");
            thumbnail.setTimestamp("");
            thumbnail.addImage(thumbImage);
        }

        super.onActivityResult(requestCode, resultCode, data);
    }

    private void processPictureWhenReady(final String picturePath) {
        final File pictureFile = new File(picturePath);

        if (pictureFile.exists()) {
            // The picture is ready; process it.
            // TODO: CamFind stuff goes here.


        } else {
            // The file does not exist yet. Before starting the file observer, you
            // can update your UI to let the user know that the application is
            // waiting for the picture (for example, by displaying the thumbnail
            // image and a progress indicator).

            final File parentDirectory = pictureFile.getParentFile();
            FileObserver observer = new FileObserver(parentDirectory.getPath(),
                    FileObserver.CLOSE_WRITE | FileObserver.MOVED_TO) {
                // Protect against additional pending events after CLOSE_WRITE
                // or MOVED_TO is handled.
                private boolean isFileWritten;

                @Override
                public void onEvent(int event, String path) {
                    if (!isFileWritten) {
                        // For safety, make sure that the file that was created in
                        // the directory is actually the one that we're expecting.
                        File affectedFile = new File(parentDirectory, path);
                        isFileWritten = affectedFile.equals(pictureFile);

                        if (isFileWritten) {
                            stopWatching();

                            // Now that the file is ready, recursively call
                            // processPictureWhenReady again (on the UI thread).
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    processPictureWhenReady(picturePath);
                                }
                            });
                        }
                    }
                }
            };
            observer.startWatching();
        }
    }

    /*
     *    ,ad8888ba,                                                                88
     *   d8"'    `"8b                                                               88
     *  d8'                                                                         88
     *  88              ,adPPYba,  8b,dPPYba,    ,adPPYba,  8b,dPPYba,  ,adPPYYba,  88
     *  88      88888  a8P_____88  88P'   `"8a  a8P_____88  88P'   "Y8  ""     `Y8  88
     *  Y8,        88  8PP"""""""  88       88  8PP"""""""  88          ,adPPPPP88  88
     *   Y8a.    .a88  "8b,   ,aa  88       88  "8b,   ,aa  88          88,    ,88  88
     *    `"Y88888P"    `"Ybbd8"'  88       88   `"Ybbd8"'  88          `"8bbdP"Y8  88
     */

    private void setView(View cardView){
        final View theCardView = cardView;
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return theCardView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return theCardView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        setContentView(mCardScroller);
    }
}
